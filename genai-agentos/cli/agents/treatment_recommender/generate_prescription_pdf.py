from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
import datetime
import os
from pathlib import Path

def generate_treatment_pdf(treatment_data: dict, patient_id: str = "Patient", output_path: str = "prescription.pdf"):
    required_keys = ["condition", "medications", "lifestyle", "cautions"]
    if not all(key in treatment_data for key in required_keys):
        raise ValueError("Missing required fields in treatment data")

    output_dir = os.path.dirname(output_path)
    if output_dir:
        Path(output_dir).mkdir(parents=True, exist_ok=True)

    c = canvas.Canvas(output_path, pagesize=A4)
    width, height = A4

    y = height - 50
    line_height = 20

    def draw_line(text, bold=False):
        nonlocal y
        if bold:
            c.setFont("Helvetica-Bold", 12)
        else:
            c.setFont("Helvetica", 11)
        c.drawString(50, y, text)
        y -= line_height

    # Header
    draw_line("AI Treatment Summary", bold=True)
    draw_line(f"Date: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}")
    draw_line(f"Patient ID: {patient_id}")
    draw_line("")

    # Diagnosis
    draw_line(f"Diagnosis: {treatment_data['condition']}", bold=True)

    # Medications
    draw_line("Medications:", bold=True)
    for med in treatment_data.get("medications", []):
        draw_line(f"- {med['name']} | {med['dosage']} | {med['duration']}")

    # Lifestyle Advice
    draw_line("\nLifestyle Recommendations:", bold=True)
    for tip in treatment_data.get("lifestyle", []):
        draw_line(f"- {tip}")

    # Cautions
    draw_line("\nCautions / Contraindications:", bold=True)
    for caution in treatment_data.get("cautions", []):
        draw_line(f"- {caution}")

    # Footer
    draw_line("\n---", bold=False)
    draw_line("This summary is generated by an AI system and should be reviewed by a licensed medical professional.", bold=False)

    c.showPage()
    c.save()
    return output_path
